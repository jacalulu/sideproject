{
  "author": {
    "name": "Julian Halenby",
    "email": "j.haldenby@gmail.com"
  },
  "name": "ajaxs",
  "description": "Express middleware that will simplify ajax calls, based on zerver.",
  "version": "0.1.4",
  "license": "MIT",
  "engines": {
    "node": ">=0.8"
  },
  "main": "ajaxs",
  "repository": {
    "type": "git",
    "url": "https://github.com/canuc/ajaxs"
  },
  "keywords": [
    "ajax",
    "express",
    "simple",
    "zerver"
  ],
  "dependencies": {},
  "readme": "Express Simple Ajax\n-------------------\n\nThis will simplify the ajax calls, and runs as middleware for express. \n\nThe interface was modelled after zerver, with a compatible interface with a few extra parameters.\n\nTo install:\n\n```sh\n\tnpm install ajaxs\n```\n\n# Advantages\n\n I have found with working with zerver, that it leads you to develop API-first services. One of the main issues that I found is that zerver was too bloated with unessary functionality as it was attempting to be a full web service, where most of the time I just wanted to use the ajax call simplicafication methods. \n\n So without further adieu, I present AJAXsimple. It is a lightweight piece of express middleware that simplifies the process of making ajax web calls to you express application.\n\n# Overview\n\n## Server Side\nCheck out the examples directory, but as recap:\n\nOn your server side you must import the library, and set up express to use the middleware functionality:\n\n```javascript\n\tvar AJAXs = require('ajaxs');\n\tvar myAjaxMiddleware = new AJAXs();\n\tapp.use( myAjaxMiddleware.middleware() );\n```\n\nBy default all the api objects will be read from ajaxs ( if unspecified in the constructor ). This can be changed to any base folder by altering the folling line in the previous example: ( the api folder will be referred to as api from now on)\n\n```javascript\n\tvar myAjaxMiddleware = new AJAXs('api');\n```\n\nCreate a your api functions: \n\n```javascript\n\texports.logwithcallback = function( logstring, callback ) {\n\t\tconsole.log( \"Client says: \" + logstring );\n\t\tvar result = [ { name: \"asdf\" } ]; // do some work... \n\t\tcallback( result );\n\t}\n```\n\n## Client Side\n\nNext in your client html you simply include the script refered to by /api/{{yourapifile}}.js. Then you are good to call any functions on your client side without having to worry about the backend ajax calls.\n\n```html\n<html>\n\t<head>\n\t\t<title>Test</title>\n\t</head>\n\t<body>\n\t</body>\n\t<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n\t<script src=\"/api/logger.js\"></script>\n\t<script>\n\t\tlogger.log(\"Message From client!\");\n\t</script>\n</html>\n```\n\nThe client side depends on jquery so you must include html before you include the your api.\n\n# Additions\n\n## Need the request object?\n\nIf you define the static property `needRequest` as true on the API object then the request will be passed through as the first parameter. This is useful if you have a cookie parser middleware running before ajaxs. For example check ajaxsimplewithreq.\n\n## Need more time ?\n\nThere is a default timeout of 30 seconds before the server will respond with a 500 error, if you set `timeout` as a Numeric property on the API object ( in milli-seconds )  then you will be granted more time. Please check ajaxsimplewithreq.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/canuc/ajaxs/issues"
  },
  "_id": "ajaxs@0.1.4",
  "_from": "ajaxs@*"
}
